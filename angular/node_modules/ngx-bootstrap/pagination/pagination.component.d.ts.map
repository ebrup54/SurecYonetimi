{"version":3,"file":"pagination.component.d.ts","sources":["pagination.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ChangeDetectorRef, ElementRef, EventEmitter, OnInit, Provider, TemplateRef } from '@angular/core';\r\nimport { ControlValueAccessor } from '@angular/forms';\r\nimport { PaginationConfig } from './pagination.config';\r\nimport { ConfigModel, PagesModel, PaginationLinkContext, PaginationNumberLinkContext } from './models';\r\nexport interface PageChangedEvent {\r\n    itemsPerPage: number;\r\n    page: number;\r\n}\r\nexport declare const PAGINATION_CONTROL_VALUE_ACCESSOR: Provider;\r\nexport declare class PaginationComponent implements ControlValueAccessor, OnInit {\r\n    private elementRef;\r\n    private changeDetection;\r\n    config: ConfigModel;\r\n    /** if `true` aligns each link to the sides of pager */\r\n    align: boolean;\r\n    /** limit number for page links in pager */\r\n    maxSize: number;\r\n    /** if false first and last buttons will be hidden */\r\n    boundaryLinks: boolean;\r\n    /** if false previous and next buttons will be hidden */\r\n    directionLinks: boolean;\r\n    /** first button text */\r\n    firstText: string;\r\n    /** previous button text */\r\n    previousText: string;\r\n    /** next button text */\r\n    nextText: string;\r\n    /** last button text */\r\n    lastText: string;\r\n    /** if true current page will in the middle of pages list */\r\n    rotate: boolean;\r\n    /** add class to <code><li\\></code> */\r\n    pageBtnClass: string;\r\n    /** if true pagination component will be disabled */\r\n    disabled: boolean;\r\n    /** custom template for page link */\r\n    customPageTemplate: TemplateRef<PaginationNumberLinkContext>;\r\n    /** custom template for next link */\r\n    customNextTemplate: TemplateRef<PaginationLinkContext>;\r\n    /** custom template for previous link */\r\n    customPreviousTemplate: TemplateRef<PaginationLinkContext>;\r\n    /** custom template for first link */\r\n    customFirstTemplate: TemplateRef<PaginationLinkContext>;\r\n    /** custom template for last link */\r\n    customLastTemplate: TemplateRef<PaginationLinkContext>;\r\n    /** fired when total pages count changes, $event:number equals to total pages count */\r\n    numPages: EventEmitter<number>;\r\n    /** fired when page was changed, $event:{page, itemsPerPage} equals to object\r\n     * with current page index and number of items per page\r\n     */\r\n    pageChanged: EventEmitter<PageChangedEvent>;\r\n    /** maximum number of items per page. If value less than 1 will display all items on one page */\r\n    itemsPerPage: number;\r\n    /** total number of items in all pages */\r\n    totalItems: number;\r\n    totalPages: number;\r\n    page: number;\r\n    onChange: Function;\r\n    onTouched: Function;\r\n    classMap: string;\r\n    pages: PagesModel[];\r\n    protected _itemsPerPage: number;\r\n    protected _totalItems: number;\r\n    protected _totalPages: number;\r\n    protected inited: boolean;\r\n    protected _page: number;\r\n    constructor(elementRef: ElementRef, paginationConfig: PaginationConfig, changeDetection: ChangeDetectorRef);\r\n    configureOptions(config: ConfigModel): void;\r\n    ngOnInit(): void;\r\n    writeValue(value: number): void;\r\n    getText(key: string): string;\r\n    noPrevious(): boolean;\r\n    noNext(): boolean;\r\n    registerOnChange(fn: () => {}): void;\r\n    registerOnTouched(fn: () => {}): void;\r\n    selectPage(page: number, event?: Event): void;\r\n    protected makePage(num: number, text: string, active: boolean): {\r\n        number: number;\r\n        text: string;\r\n        active: boolean;\r\n    };\r\n    protected getPages(currentPage: number, totalPages: number): PagesModel[];\r\n    protected calculateTotalPages(): number;\r\n}\r\n"]}