{"version":3,"file":"popover.directive.d.ts","sources":["popover.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, EventEmitter, OnDestroy, OnInit, Renderer2, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { PopoverConfig } from './popover.config';\r\nimport { ComponentLoaderFactory } from 'ngx-bootstrap/component-loader';\r\nimport { PositioningService } from 'ngx-bootstrap/positioning';\r\n/**\r\n * A lightweight, extensible directive for fancy popover creation.\r\n */\r\nexport declare class PopoverDirective implements OnInit, OnDestroy {\r\n    private _elementRef;\r\n    private _renderer;\r\n    private _positionService;\r\n    /** sets disable adaptive position */\r\n    adaptivePosition: boolean;\r\n    /**\r\n     * Content to be displayed as popover.\r\n     */\r\n    popover: string | TemplateRef<any>;\r\n    /**\r\n     * Context to be used if popover is a template.\r\n     */\r\n    popoverContext: any;\r\n    /**\r\n     * Title of a popover.\r\n     */\r\n    popoverTitle: string;\r\n    /**\r\n     * Placement of a popover. Accepts: \"top\", \"bottom\", \"left\", \"right\"\r\n     */\r\n    placement: 'top' | 'bottom' | 'left' | 'right' | 'auto' | 'top left' | 'top right' | 'right top' | 'right bottom' | 'bottom right' | 'bottom left' | 'left bottom' | 'left top';\r\n    /**\r\n     * Close popover on outside click\r\n     */\r\n    outsideClick: boolean;\r\n    /**\r\n     * Specifies events that should trigger. Supports a space separated list of\r\n     * event names.\r\n     */\r\n    triggers: string;\r\n    /**\r\n     * A selector specifying the element the popover should be appended to.\r\n     */\r\n    container: string;\r\n    /**\r\n     * Css class for popover container\r\n     */\r\n    containerClass: string;\r\n    /**\r\n     * Returns whether or not the popover is currently being shown\r\n     */\r\n    isOpen: boolean;\r\n    /**\r\n     * Delay before showing the tooltip\r\n     */\r\n    delay: number;\r\n    /**\r\n     * Emits an event when the popover is shown\r\n     */\r\n    onShown: EventEmitter<any>;\r\n    /**\r\n     * Emits an event when the popover is hidden\r\n     */\r\n    onHidden: EventEmitter<any>;\r\n    protected _popoverCancelShowFn: Function;\r\n    protected _delayTimeoutId: number | any;\r\n    private _popover;\r\n    private _isInited;\r\n    constructor(_config: PopoverConfig, _elementRef: ElementRef, _renderer: Renderer2, _viewContainerRef: ViewContainerRef, cis: ComponentLoaderFactory, _positionService: PositioningService);\r\n    /**\r\n     * Opens an element’s popover. This is considered a “manual” triggering of\r\n     * the popover.\r\n     */\r\n    show(): void;\r\n    /**\r\n     * Closes an element’s popover. This is considered a “manual” triggering of\r\n     * the popover.\r\n     */\r\n    hide(): void;\r\n    /**\r\n     * Toggles an element’s popover. This is considered a “manual” triggering of\r\n     * the popover.\r\n     */\r\n    toggle(): void;\r\n    ngOnInit(): void;\r\n    ngOnDestroy(): void;\r\n}\r\n"]}