{"version":3,"file":"sortable.component.d.ts","sources":["sortable.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { EventEmitter, TemplateRef } from '@angular/core';\r\nimport { ControlValueAccessor } from '@angular/forms';\r\nimport { DraggableItem } from './draggable-item';\r\nimport { DraggableItemService } from './draggable-item.service';\r\nexport declare class SortableComponent implements ControlValueAccessor {\r\n    private static globalZoneIndex;\r\n    /** field name if input array consists of objects */\r\n    fieldName: string;\r\n    /** class name for items wrapper */\r\n    wrapperClass: string;\r\n    /** style object for items wrapper */\r\n    wrapperStyle: {\r\n        [key: string]: string;\r\n    };\r\n    /** class name for item */\r\n    itemClass: string;\r\n    /** style object for item */\r\n    itemStyle: {\r\n        [key: string]: string;\r\n    };\r\n    /** class name for active item */\r\n    itemActiveClass: string;\r\n    /** style object for active item */\r\n    itemActiveStyle: {\r\n        [key: string]: string;\r\n    };\r\n    /** class name for placeholder */\r\n    placeholderClass: string;\r\n    /** style object for placeholder */\r\n    placeholderStyle: {\r\n        [key: string]: string;\r\n    };\r\n    /** placeholder item which will be shown if collection is empty */\r\n    placeholderItem: string;\r\n    /** used to specify a custom item template. Template variables: item and index; */\r\n    itemTemplate: TemplateRef<any>;\r\n    /** fired on array change (reordering, insert, remove), same as <code>ngModelChange</code>.\r\n     *  Returns new items collection as a payload.\r\n     */\r\n    onChange: EventEmitter<any[]>;\r\n    showPlaceholder: boolean;\r\n    activeItem: number;\r\n    items: SortableItem[];\r\n    onTouched: any;\r\n    onChanged: any;\r\n    private transfer;\r\n    private currentZoneIndex;\r\n    private _items;\r\n    constructor(transfer: DraggableItemService);\r\n    onItemDragstart(event: DragEvent, item: SortableItem, i: number): void;\r\n    onItemDragover(event: DragEvent, i: number): void;\r\n    cancelEvent(event: DragEvent): void;\r\n    onDrop(item: DraggableItem): void;\r\n    resetActiveItem(event: DragEvent): void;\r\n    registerOnChange(callback: () => void): void;\r\n    registerOnTouched(callback: () => void): void;\r\n    writeValue(value: any[]): void;\r\n    updatePlaceholderState(): void;\r\n    getItemStyle(isActive: boolean): {};\r\n    private initDragstartEvent;\r\n}\r\nexport declare interface SortableItem {\r\n    id: number;\r\n    value: string;\r\n    initData: any;\r\n}\r\n"]}