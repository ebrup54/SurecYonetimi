{"version":3,"file":"typeahead.directive.d.ts","sources":["typeahead.directive.d.ts"],"names":[],"mappingssourcesContent":["import { ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, OnInit, Renderer2, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { NgControl } from '@angular/forms';\r\nimport { Observable } from 'rxjs';\r\nimport { ComponentLoaderFactory } from 'ngx-bootstrap/component-loader';\r\nimport { TypeaheadContainerComponent } from './typeahead-container.component';\r\nimport { TypeaheadMatch } from './typeahead-match.class';\r\nimport { TypeaheadConfig } from './typeahead.config';\r\nimport { TypeaheadOrder } from './typeahead-order.class';\r\nimport { TypeaheadOptionItemContext, TypeaheadOptionListContext } from './models';\r\ndeclare type TypeaheadOption = string | {\r\n    [key in string | number]: any;\r\n};\r\ndeclare type Typeahead = TypeaheadOption[] | Observable<TypeaheadOption[]>;\r\nexport declare class TypeaheadDirective implements OnInit, OnDestroy {\r\n    private changeDetection;\r\n    private element;\r\n    private ngControl;\r\n    private renderer;\r\n    /** options source, can be Array of strings, objects or\r\n     * an Observable for external matching process\r\n     */\r\n    typeahead: Typeahead;\r\n    /** minimal no of characters that needs to be entered before\r\n     * typeahead kicks-in. When set to 0, typeahead shows on focus with full\r\n     * list of options (limited as normal by typeaheadOptionsLimit)\r\n     */\r\n    typeaheadMinLength: number;\r\n    /** sets use adaptive position */\r\n    adaptivePosition: boolean;\r\n    /** turn on/off animation */\r\n    isAnimated: boolean;\r\n    /** minimal wait time after last character typed before typeahead kicks-in */\r\n    typeaheadWaitMs: number;\r\n    /** maximum length of options items list. The default value is 20 */\r\n    typeaheadOptionsLimit: number;\r\n    /** when options source is an array of objects, the name of field\r\n     * that contains the options value, we use array item as option in case\r\n     * of this field is missing. Supports nested properties and methods.\r\n     */\r\n    typeaheadOptionField: string;\r\n    /** when options source is an array of objects, the name of field that\r\n     * contains the group value, matches are grouped by this field when set.\r\n     */\r\n    typeaheadGroupField: string;\r\n    /** Used to specify a custom order of matches. When options source is an array of objects\r\n     * a field for sorting has to be set up. In case of options source is an array of string,\r\n     * a field for sorting is absent. The ordering direction could be changed to ascending or descending.\r\n     */\r\n    typeaheadOrderBy: TypeaheadOrder;\r\n    /** should be used only in case of typeahead attribute is Observable of array.\r\n     * If true - loading of options will be async, otherwise - sync.\r\n     * true make sense if options array is large.\r\n     */\r\n    typeaheadAsync: boolean;\r\n    /** match latin symbols.\r\n     * If true the word s√∫per would match super and vice versa.\r\n     */\r\n    typeaheadLatinize: boolean;\r\n    /** Can be use to search words by inserting a single white space between each characters\r\n     *  for example 'C a l i f o r n i a' will match 'California'.\r\n     */\r\n    typeaheadSingleWords: boolean;\r\n    /** should be used only in case typeaheadSingleWords attribute is true.\r\n     * Sets the word delimiter to break words. Defaults to space.\r\n     */\r\n    typeaheadWordDelimiters: string;\r\n    /** should be used only in case typeaheadSingleWords attribute is true.\r\n     * Sets the word delimiter to match exact phrase.\r\n     * Defaults to simple and double quotes.\r\n     */\r\n    typeaheadPhraseDelimiters: string;\r\n    /** used to specify a custom item template.\r\n     * Template variables exposed are called item and index;\r\n     */\r\n    typeaheadItemTemplate: TemplateRef<TypeaheadOptionItemContext>;\r\n    /** used to specify a custom options list template.\r\n     * Template variables: matches, itemTemplate, query\r\n     */\r\n    optionsListTemplate: TemplateRef<TypeaheadOptionListContext>;\r\n    /** specifies if typeahead is scrollable  */\r\n    typeaheadScrollable: boolean;\r\n    /** specifies number of options to show in scroll view  */\r\n    typeaheadOptionsInScrollableView: number;\r\n    /** used to hide result on blur */\r\n    typeaheadHideResultsOnBlur: boolean;\r\n    /** fired when an options list was opened and the user clicked Tab\r\n     * If a value equal true, it will be chosen first or active item in the list\r\n     * If value equal false, it will be chosen an active item in the list or nothing\r\n     */\r\n    typeaheadSelectFirstItem: boolean;\r\n    /** makes active first item in a list */\r\n    typeaheadIsFirstItemActive: boolean;\r\n    /** fired when 'busy' state of this component was changed,\r\n     * fired on async mode only, returns boolean\r\n     */\r\n    typeaheadLoading: EventEmitter<boolean>;\r\n    /** fired on every key event and returns true\r\n     * in case of matches are not detected\r\n     */\r\n    typeaheadNoResults: EventEmitter<boolean>;\r\n    /** fired when option was selected, return object with data of this option */\r\n    typeaheadOnSelect: EventEmitter<TypeaheadMatch>;\r\n    /** fired when blur event occurs. returns the active item */\r\n    typeaheadOnBlur: EventEmitter<TypeaheadMatch>;\r\n    /**\r\n     * A selector specifying the element the typeahead should be appended to.\r\n     */\r\n    container: string;\r\n    /** This attribute indicates that the dropdown should be opened upwards */\r\n    dropup: boolean;\r\n    /** if false restrict model values to the ones selected from the popup only will be provided */\r\n    /** if false the first match automatically will not be focused as you type */\r\n    /** format the ng-model result after selection */\r\n    /** if true automatically select an item when there is one option that exactly matches the user input */\r\n    /**  if true select the currently highlighted match on blur */\r\n    /**  if false don't focus the input element the typeahead directive is associated with on selection */\r\n    activeDescendant: string;\r\n    isOpen: boolean;\r\n    list: string;\r\n    _container: TypeaheadContainerComponent;\r\n    isActiveItemChanged: boolean;\r\n    isFocused: boolean;\r\n    cancelRequestOnFocusLost: boolean;\r\n    protected keyUpEventEmitter: EventEmitter<string>;\r\n    protected _matches: TypeaheadMatch[];\r\n    protected placement: string;\r\n    private _typeahead;\r\n    private _subscriptions;\r\n    private _outsideClickListener;\r\n    constructor(cis: ComponentLoaderFactory, config: TypeaheadConfig, changeDetection: ChangeDetectorRef, element: ElementRef, ngControl: NgControl, renderer: Renderer2, viewContainerRef: ViewContainerRef);\r\n    ngOnInit(): void;\r\n    onInput(e: any): void;\r\n    onChange(event: KeyboardEvent): void;\r\n    onFocus(): void;\r\n    onBlur(): void;\r\n    onKeydown(event: KeyboardEvent): void;\r\n    changeModel(match: TypeaheadMatch): void;\r\n    readonly matches: TypeaheadMatch[];\r\n    show(): void;\r\n    hide(): void;\r\n    onOutsideClick(): void;\r\n    ngOnDestroy(): void;\r\n    protected asyncActions(): void;\r\n    protected syncActions(): void;\r\n    protected normalizeOption(option: TypeaheadOption): string;\r\n    protected normalizeQuery(value: string): string | string[];\r\n    protected testMatch(match: string, test: string[] | string): boolean;\r\n    protected finalizeAsyncCall(matches: TypeaheadOption[]): void;\r\n    protected prepareMatches(options: TypeaheadOption[]): void;\r\n    protected orderMatches(options: TypeaheadOption[]): TypeaheadOption[];\r\n    protected hasMatches(): boolean;\r\n}\r\nexport {};\r\n"]}