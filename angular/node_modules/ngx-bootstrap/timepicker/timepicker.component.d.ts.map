{"version":3,"file":"timepicker.component.d.ts","sources":["timepicker.component.d.ts"],"names":[],"mappingssourcesContent":["import { ChangeDetectorRef, EventEmitter, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\r\nimport { ControlValueAccessor } from '@angular/forms';\r\nimport { TimepickerActions } from './reducer/timepicker.actions';\r\nimport { TimepickerStore } from './reducer/timepicker.store';\r\nimport { TimepickerConfig } from './timepicker.config';\r\nimport { TimeChangeSource, TimepickerComponentState, TimepickerControls } from './timepicker.models';\r\nimport { Subscription } from 'rxjs';\r\nimport { ControlValueAccessorModel } from './models';\r\nexport declare const TIMEPICKER_CONTROL_VALUE_ACCESSOR: ControlValueAccessorModel;\r\nexport declare class TimepickerComponent implements ControlValueAccessor, TimepickerComponentState, TimepickerControls, OnChanges, OnDestroy {\r\n    private _cd;\r\n    private _store;\r\n    private _timepickerActions;\r\n    /** hours change step */\r\n    hourStep: number;\r\n    /** hours change step */\r\n    minuteStep: number;\r\n    /** seconds change step */\r\n    secondsStep: number;\r\n    /** if true hours and minutes fields will be readonly */\r\n    readonlyInput: boolean;\r\n    /** if true hours and minutes fields will be disabled */\r\n    disabled: boolean;\r\n    /** if true scroll inside hours and minutes inputs will change time */\r\n    mousewheel: boolean;\r\n    /** if true the values of hours and minutes can be changed using the up/down arrow keys on the keyboard */\r\n    arrowkeys: boolean;\r\n    /** if true spinner arrows above and below the inputs will be shown */\r\n    showSpinners: boolean;\r\n    /** if true meridian button will be shown */\r\n    showMeridian: boolean;\r\n    /** show minutes in timepicker */\r\n    showMinutes: boolean;\r\n    /** show seconds in timepicker */\r\n    showSeconds: boolean;\r\n    /** meridian labels based on locale */\r\n    meridians: string[];\r\n    /** minimum time user can select */\r\n    min: Date;\r\n    /** maximum time user can select */\r\n    max: Date;\r\n    /** placeholder for hours field in timepicker */\r\n    hoursPlaceholder: string;\r\n    /** placeholder for minutes field in timepicker */\r\n    minutesPlaceholder: string;\r\n    /** placeholder for seconds field in timepicker */\r\n    secondsPlaceholder: string;\r\n    /** emits true if value is a valid date */\r\n    isValid: EventEmitter<boolean>;\r\n    hours: string;\r\n    minutes: string;\r\n    seconds: string;\r\n    meridian: string;\r\n    /** @deprecated - please use `isEditable` instead */\r\n    readonly isSpinnersVisible: boolean;\r\n    readonly isEditable: boolean;\r\n    invalidHours: boolean;\r\n    invalidMinutes: boolean;\r\n    invalidSeconds: boolean;\r\n    labelHours: string;\r\n    labelMinutes: string;\r\n    labelSeconds: string;\r\n    canIncrementHours: boolean;\r\n    canIncrementMinutes: boolean;\r\n    canIncrementSeconds: boolean;\r\n    canDecrementHours: boolean;\r\n    canDecrementMinutes: boolean;\r\n    canDecrementSeconds: boolean;\r\n    canToggleMeridian: boolean;\r\n    onChange: Function;\r\n    onTouched: Function;\r\n    timepickerSub: Subscription;\r\n    constructor(_config: TimepickerConfig, _cd: ChangeDetectorRef, _store: TimepickerStore, _timepickerActions: TimepickerActions);\r\n    resetValidation(): void;\r\n    isPM(): boolean;\r\n    prevDef($event: Event): void;\r\n    wheelSign($event: WheelEventInit): number;\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    changeHours(step: number, source?: TimeChangeSource): void;\r\n    changeMinutes(step: number, source?: TimeChangeSource): void;\r\n    changeSeconds(step: number, source?: TimeChangeSource): void;\r\n    updateHours(hours: string): void;\r\n    updateMinutes(minutes: string): void;\r\n    updateSeconds(seconds: string): void;\r\n    isValidLimit(): boolean;\r\n    _updateTime(): void;\r\n    toggleMeridian(): void;\r\n    /**\r\n     * Write a new value to the element.\r\n     */\r\n    writeValue(obj: string | null | undefined | Date): void;\r\n    /**\r\n     * Set the function to be called when the control receives a change event.\r\n     */\r\n    registerOnChange(fn: (_: any) => {}): void;\r\n    /**\r\n     * Set the function to be called when the control receives a touch event.\r\n     */\r\n    registerOnTouched(fn: () => {}): void;\r\n    /**\r\n     * This function is called when the control status changes to or from \"disabled\".\r\n     * Depending on the value, it will enable or disable the appropriate DOM element.\r\n     *\r\n     * @param isDisabled\r\n     */\r\n    setDisabledState(isDisabled: boolean): void;\r\n    ngOnDestroy(): void;\r\n    private _renderTime;\r\n}\r\n"]}